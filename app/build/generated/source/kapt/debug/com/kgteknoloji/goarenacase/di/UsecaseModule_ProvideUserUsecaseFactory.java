// Generated by Dagger (https://google.github.io/dagger).
package com.kgteknoloji.goarenacase.di;

import com.kgteknoloji.goarenacase.data.repository.UserRepository;
import com.kgteknoloji.goarenacase.usecase.UserUsecase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class UsecaseModule_ProvideUserUsecaseFactory implements Factory<UserUsecase> {
  private final UsecaseModule module;

  private final Provider<UserRepository> userRepositoryProvider;

  public UsecaseModule_ProvideUserUsecaseFactory(
      UsecaseModule module, Provider<UserRepository> userRepositoryProvider) {
    this.module = module;
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public UserUsecase get() {
    return provideInstance(module, userRepositoryProvider);
  }

  public static UserUsecase provideInstance(
      UsecaseModule module, Provider<UserRepository> userRepositoryProvider) {
    return proxyProvideUserUsecase(module, userRepositoryProvider.get());
  }

  public static UsecaseModule_ProvideUserUsecaseFactory create(
      UsecaseModule module, Provider<UserRepository> userRepositoryProvider) {
    return new UsecaseModule_ProvideUserUsecaseFactory(module, userRepositoryProvider);
  }

  public static UserUsecase proxyProvideUserUsecase(
      UsecaseModule instance, UserRepository userRepository) {
    return Preconditions.checkNotNull(
        instance.provideUserUsecase(userRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}

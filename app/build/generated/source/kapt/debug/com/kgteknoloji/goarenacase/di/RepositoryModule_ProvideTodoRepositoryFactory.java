// Generated by Dagger (https://google.github.io/dagger).
package com.kgteknoloji.goarenacase.di;

import com.kgteknoloji.goarenacase.data.api.Api;
import com.kgteknoloji.goarenacase.data.repository.TodoRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class RepositoryModule_ProvideTodoRepositoryFactory
    implements Factory<TodoRepository> {
  private final RepositoryModule module;

  private final Provider<Api> apiProvider;

  public RepositoryModule_ProvideTodoRepositoryFactory(
      RepositoryModule module, Provider<Api> apiProvider) {
    this.module = module;
    this.apiProvider = apiProvider;
  }

  @Override
  public TodoRepository get() {
    return provideInstance(module, apiProvider);
  }

  public static TodoRepository provideInstance(RepositoryModule module, Provider<Api> apiProvider) {
    return proxyProvideTodoRepository(module, apiProvider.get());
  }

  public static RepositoryModule_ProvideTodoRepositoryFactory create(
      RepositoryModule module, Provider<Api> apiProvider) {
    return new RepositoryModule_ProvideTodoRepositoryFactory(module, apiProvider);
  }

  public static TodoRepository proxyProvideTodoRepository(RepositoryModule instance, Api api) {
    return Preconditions.checkNotNull(
        instance.provideTodoRepository(api),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}

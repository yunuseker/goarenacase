// Generated by Dagger (https://google.github.io/dagger).
package com.kgteknoloji.goarenacase.di;

import com.kgteknoloji.goarenacase.data.repository.TodoRepository;
import com.kgteknoloji.goarenacase.usecase.TodoUsecase;
import com.kgteknoloji.goarenacase.util.DateFormatter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class UsecaseModule_ProvideTodoUsecaseFactory implements Factory<TodoUsecase> {
  private final UsecaseModule module;

  private final Provider<TodoRepository> todoRepositoryProvider;

  private final Provider<DateFormatter> dateFormatterProvider;

  public UsecaseModule_ProvideTodoUsecaseFactory(
      UsecaseModule module,
      Provider<TodoRepository> todoRepositoryProvider,
      Provider<DateFormatter> dateFormatterProvider) {
    this.module = module;
    this.todoRepositoryProvider = todoRepositoryProvider;
    this.dateFormatterProvider = dateFormatterProvider;
  }

  @Override
  public TodoUsecase get() {
    return provideInstance(module, todoRepositoryProvider, dateFormatterProvider);
  }

  public static TodoUsecase provideInstance(
      UsecaseModule module,
      Provider<TodoRepository> todoRepositoryProvider,
      Provider<DateFormatter> dateFormatterProvider) {
    return proxyProvideTodoUsecase(
        module, todoRepositoryProvider.get(), dateFormatterProvider.get());
  }

  public static UsecaseModule_ProvideTodoUsecaseFactory create(
      UsecaseModule module,
      Provider<TodoRepository> todoRepositoryProvider,
      Provider<DateFormatter> dateFormatterProvider) {
    return new UsecaseModule_ProvideTodoUsecaseFactory(
        module, todoRepositoryProvider, dateFormatterProvider);
  }

  public static TodoUsecase proxyProvideTodoUsecase(
      UsecaseModule instance, TodoRepository todoRepository, DateFormatter dateFormatter) {
    return Preconditions.checkNotNull(
        instance.provideTodoUsecase(todoRepository, dateFormatter),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
